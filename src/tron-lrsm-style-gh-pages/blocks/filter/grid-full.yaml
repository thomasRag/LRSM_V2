import:
- ../space/tile.yaml
styles:
    block:
        shaders:
            defines:
                ADD: +
                EPSILON: 1.0e-07
                HALF_PI: 1.5707963267948966
                MULTIPLY: '*'
                PI: 3.141592653589793
                QUATER_PI: 0.785398163
                SUBTRACT: '-'
                TWO_PI: 6.283185307179586
                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)
    filter-grid:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Apply a grid filter to the syle.

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - block
        - patterns-grid
        shaders:
            blocks:
                filter: 'color.rgb = color.rgb GRID_BLEND (tileGrid()*GRID_AMOUNT);

                    '
            defines:
                GRID_AMOUNT: 0.2
                GRID_BLEND: ADD
        ui:
            shaders:
                defines:
                    GRID_AMOUNT:
                        label: Amount
                        range:
                            max: 1.0
                            min: 0.0
                            step: 0.01
                        type: number
                    GRID_BLEND:
                        label: Blend mode
                        type: dropdownArray
                        values:
                        - ADD
                        - SUBTRACT
                        - MULTIPLY
    patterns-grid:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: "Collection of functions to draw grids. To learn more about\
                \ patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)\
                \    \n"
            examples:
                blueprint:
                    img: https://tangrams.github.io/tangram-sandbox/styles/blueprint.png
                    lines: 75-76
                    url: https://tangrams.github.io/tangram-sandbox/styles/blueprint.yaml
                grain:
                    img: https://tangrams.github.io/tangram-sandbox/styles/grain.png
                    lines: 15
                    url: https://tangrams.github.io/tangram-sandbox/styles/grain.yaml
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - space-tile
        shaders:
            blocks:
                global: "// Draw a grid in the space a specific resolution and pressition\n\
                    bool grid (vec2 st, float res, float press) {\n    vec2 grid =\
                    \ fract(st*res);\n    return grid.x < res*press || grid.y < res*press;\n\
                    }\n//\n// Draw a grid in the space a specific resolution\nbool\
                    \ grid (vec2 st, float res) {\n    return grid(st, res, 1.0);\n\
                    }\n\n//\n// Draw a grid in 45 degress with a specific width\n\
                    float diagonalGrid(vec2 st, float width){\n    return step(.5,max(\
                    \ smoothstep(st.x-width,st.x,st.y)*(1.-smoothstep(st.x,st.x+width,st.y)),\n\
                    \                        smoothstep(st.x-width,st.x,1.0-st.y)*(1.-smoothstep(st.x,st.x+width,1.0-st.y))));\n\
                    }\n\n// Draw a grid using tile coordenates in a specific resolution\n\
                    float tileGrid (float res) {\n    vec2 st = getTileCoords()*100.*res;\n\
                    \    float pct = 0.0;\n    float press = 0.4+(1.0-fract(u_map_position.z))*0.1;\n\
                    \    if (grid(st,0.01,press)) pct += 0.5;\n    if (grid(st,0.1,press))\
                    \ pct += 0.1;\n    return pct;\n}\n\n// Draw two grid that smoothly\
                    \ interpolates acording to zooms\nfloat tileGrid() { \n    return\
                    \ mix(tileGrid(1.),tileGrid(2.),fract(u_map_position.z)); \n}"
    space-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Get the position on the tile

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// Variant to be add to both vertex and fragments shaders\n\
                    varying vec3 v_pos;\n//\n// Get the coordinates in tile space\n\
                    // ================================\nvec2 getTileCoords() {\n\
                    \    return fract(v_pos.xy);\n}\n"
                position: '// Normalize the attribute position of a vertex

                    v_pos = modelPosition().xyz;'
