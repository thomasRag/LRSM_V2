import:
- ./easing.yaml
styles:
    functions-easing:
        doc:
            author:
                name: StackGL
                url: http://stack.gl/
            description: 'Easing functions originally develop by Robert Penner''s
                and transformed to GLSL by [StackGL](http://stack.gl/) in this repo:
                <https://github.com/stackgl/glsl-easings>

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "float linear (in float t) {\n    return t;\n}\n\nfloat exponentialIn\
                    \ (in float t) {\n    return t == 0.0 ? t : pow(2.0, 10.0 * (t\
                    \ - 1.0));\n}\n\nfloat exponentialOut (in float t) {\n    return\
                    \ t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\nfloat exponentialInOut\
                    \ (in float t) {\n    return t == 0.0 || t == 1.0\n    ? t\n \
                    \   : t < 0.5\n        ? +0.5 * pow(2.0, (20.0 * t) - 10.0)\n\
                    \        : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;\n}\n\nfloat\
                    \ sineIn (in float t) {\n    return sin((t - 1.0) * HALF_PI) +\
                    \ 1.0;\n}\n\nfloat sineOut (in float t) {\n    return sin(t *\
                    \ HALF_PI);\n}\n\nfloat sineInOut (in float t) {\n    return -0.5\
                    \ * (cos(PI * t) - 1.0);\n}\n\nfloat qinticIn (in float t) {\n\
                    \    return pow(t, 5.0);\n}\n\nfloat qinticOut (in float t) {\n\
                    \    return 1.0 - (pow(t - 1.0, 5.0));\n}\n\nfloat qinticInOut\
                    \ (in float t) {\n    return t < 0.5\n        ? +16.0 * pow(t,\
                    \ 5.0)\n        : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;\n}\n\n\
                    float quarticIn (in float t) {\n    return pow(t, 4.0);\n}\n\n\
                    float quarticOut (in float t) {\n    return pow(t - 1.0, 3.0)\
                    \ * (1.0 - t) + 1.0;\n}\n\nfloat quarticInOut (in float t) {\n\
                    \    return t < 0.5\n        ? +8.0 * pow(t, 4.0)\n        : -8.0\
                    \ * pow(t - 1.0, 4.0) + 1.0;\n}\n\nfloat quadraticInOut (in float\
                    \ t) {\n    float p = 2.0 * t * t;\n    return t < 0.5 ? p : -p\
                    \ + (4.0 * t) - 1.0;\n}\n\nfloat quadraticIn (in float t) {\n\
                    \    return t * t;\n}\n\nfloat quadraticOut (in float t) {\n \
                    \   return -t * (t - 2.0);\n}\n\nfloat cubicIn (in float t) {\n\
                    \    return t * t * t;\n}\n\nfloat cubicOut (in float t) {\n \
                    \   float f = t - 1.0;\n    return f * f * f + 1.0;\n}\n\nfloat\
                    \ cubicInOut (in float t) {\n    return t < 0.5\n        ? 4.0\
                    \ * t * t * t\n        : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n\
                    }\n\nfloat elasticIn (in float t) {\n    return sin(13.0 * t *\
                    \ HALF_PI) * pow(2.0, 10.0 * (t - 1.0));\n}\n\nfloat elasticOut\
                    \ (in float t) {\n    return sin(-13.0 * (t + 1.0) * HALF_PI)\
                    \ * pow(2.0, -10.0 * t) + 1.0;\n}\n\nfloat elasticInOut (in float\
                    \ t) {\n    return t < 0.5\n        ? 0.5 * sin(+13.0 * HALF_PI\
                    \ * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))\n        : 0.5\
                    \ * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0,\
                    \ -10.0 * (2.0 * t - 1.0)) + 1.0;\n}\n\nfloat circularIn (in float\
                    \ t) {\n    return 1.0 - sqrt(1.0 - t * t);\n}\n\nfloat circularOut\
                    \ (in float t) {\n    return sqrt((2.0 - t) * t);\n}\n\nfloat\
                    \ circularInOut (in float t) {\n    return t < 0.5\n        ?\
                    \ 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))\n        : 0.5 * (sqrt((3.0\
                    \ - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\n}\n\nfloat bounceOut\
                    \ (in float t) {\n    const float a = 4.0 / 11.0;\n    const float\
                    \ b = 8.0 / 11.0;\n    const float c = 9.0 / 10.0;\n\n    const\
                    \ float ca = 4356.0 / 361.0;\n    const float cb = 35442.0 / 1805.0;\n\
                    \    const float cc = 16061.0 / 1805.0;\n\n    float t2 = t *\
                    \ t;\n\n    return t < a\n    ? 7.5625 * t2\n    : t < b\n   \
                    \     ? 9.075 * t2 - 9.9 * t + 3.4\n        : t < c\n        \
                    \    ? ca * t2 - cb * t + cc\n            : 10.8 * t * t - 20.52\
                    \ * t + 10.72;\n}\n\nfloat bounceIn (in float t) {\n    return\
                    \ 1.0 - bounceOut(1.0 - t);\n}\n\nfloat bounceInOut (in float\
                    \ t) {\n    return t < 0.5\n    ? 0.5 * (1.0 - bounceOut(1.0 -\
                    \ t * 2.0))\n    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;\n}\n\n\
                    float backIn (in float t) {\n    return pow(t, 3.0) - t * sin(t\
                    \ * PI);\n}\n\nfloat backOut (in float t) {\n    float f = 1.0\
                    \ - t;\n    return 1.0 - (pow(f, 3.0) - f * sin(f * PI));\n}\n\
                    \nfloat backInOut (in float t) {\n    float f = t < 0.5\n    ?\
                    \ 2.0 * t\n    : 1.0 - (2.0 * t - 1.0);\n\n    float g = pow(f,\
                    \ 3.0) - f * sin(f * PI);\n\n    return t < 0.5\n    ? 0.5 * g\n\
                    \    : 0.5 * (1.0 - g) + 0.5;\n}"
            defines:
                HALF_PI: 1.5707963267948966
                PI: 3.141592653589793
    functions-zoom:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'when you mix this block to another block you can use the
                functions `zoom()` or `zoomEase()`. Both will help you to interpolate
                any values between the zooms `ZOOM_START` and `ZOOM_END`.

                By default `zoom()` and `zoomEase()` will return a `float `number
                between 0 and 1. But you can change it to interpolate any thing! Like
                `floats`, `vec2`, `vec3`, `vec4` and even other functions! For that
                you just need to change de `defines`: `ZOOM_IN`, and `ZOOM_OUT` to
                what ever you want to interpolate.

                `zoom()` use the cuadratic interpolation of `smoothstep()` but you
                can use `zoomEase()` to specify what type of **easing interpolation**
                you prefere. Just change the default `linear` function for any [easing
                functions describe here](#functions-easing) in the `ZOOM_FNC` define.
                Ex: `ZOOM_FNC: quadraticInOut`

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - functions-easing
        shaders:
            blocks:
                global: "float zoom() {\n    return mix( ZOOM_IN, \n             \
                    \   ZOOM_OUT, \n                clamp( smoothstep(  ZOOM_START/ZOOM_MAX,\
                    \ \n                                    ZOOM_END/ZOOM_MAX, \n\
                    \                                    max(u_map_position.z/ZOOM_MAX,\
                    \ 0.)), 0., 1.) );\n}\n\nfloat zoomEase() {\n    return mix( ZOOM_IN,\
                    \ \n                ZOOM_OUT, \n                ZOOM_FNC( (u_map_position.z-ZOOM_START)/(ZOOM_END-ZOOM_START)\
                    \ ) );\n}"
            defines:
                ZOOM_END: 20.0
                ZOOM_FNC: linear
                ZOOM_IN: 0.0
                ZOOM_MAX: max(ZOOM_START, ZOOM_END)
                ZOOM_OUT: 1.0
                ZOOM_START: 14.0
