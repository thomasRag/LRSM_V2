import:
- random.yaml
styles:
    fx-water:
        animated: true
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: "Water effect, made by altering the normal map of a surface\
                \ and applying a sky spherical map to the surface. \nThe result looks\
                \ like moving water.\n"
            examples:
                sandbox:
                    img: https://tangrams.github.io/tangram-sandbox/styles/sandbox.png
                    url: https://tangrams.github.io/tangram-sandbox/styles/sandbox.yaml
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        material:
            ambient: 0.7
            diffuse:
                mapping: spheremap
                texture: ./imgs/sem-sky-0001.jpg
        mix:
        - generative-noise
        shaders:
            blocks:
                normal: normal += snoise(vec3(worldPosition().xy*0.08,u_time*.5))*0.02;
    generative-noise:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Set of Noise functions.

                For more information on this theme read [this chapter of The Book
                of Shaders about Noise](http://thebookofshaders.com/11/).

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix: generative-random
        shaders:
            blocks:
                global: "// 1D Value Noise for 1, 2 and 3 dimentions\n// ================================\n\
                    float noise (in float x) {\n    float i = floor(x);\n    float\
                    \ f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return\
                    \ mix(random(i), random(i + 1.0), u);\n}\n\nfloat noise (vec2\
                    \ xy) {\n    vec2 i = floor(xy);\n    vec2 f = fract(xy);\n  \
                    \  float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n\
                    \    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i\
                    \ + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\
                    \    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d\
                    \ - b) * u.x * u.y;\n}\n\nfloat noise (vec3 xyz) {\n    const\
                    \ vec3 step = vec3(110.0, 241.0, 171.0);\n    vec3 i = floor(xyz);\n\
                    \    vec3 f = fract(xyz);\n    float n = dot(i, step);\n    vec3\
                    \ u = f * f * (3.0 - 2.0 * f);\n    return mix( mix(mix(random(n\
                    \ + dot(step, vec3(0,0,0))),\n                        random(n\
                    \ + dot(step, vec3(1,0,0))),\n                        u.x),\n\
                    \                    mix(random(n + dot(step, vec3(0,1,0))),\n\
                    \                        random(n + dot(step, vec3(1,1,0))),\n\
                    \                        u.x),\n                    u.y),\n  \
                    \              mix(mix(random(n + dot(step, vec3(0,0,1))),\n \
                    \                   random(n + dot(step, vec3(1,0,1))),\n    \
                    \                u.x),\n                    mix(random(n + dot(step,\
                    \ vec3(0,1,1))),\n                        random(n + dot(step,\
                    \ vec3(1,1,1))),\n                        u.x),\n            \
                    \    u.y),\n            u.z);\n}\n\n// Description : GLSL 2D simplex\
                    \ noise function\n//      Author : Ian McEwan, Ashima Arts\n//\
                    \  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License\
                    \ : \n//  Copyright (C) 2011 Ashima Arts. All rights reserved.\n\
                    //  Distributed under the MIT License. See LICENSE file.\n// \
                    \ https://github.com/ashima/webgl-noise\nvec3 mod289(vec3 x) {\
                    \ return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2\
                    \ x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3\
                    \ x) { return mod289(((x*34.0)+1.0)*x); }\nfloat snoise(vec2 v)\
                    \ {\n\n    // Precompute values for skewed triangular grid\n \
                    \   const vec4 C = vec4(0.211324865405187,\n                 \
                    \       // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\
                    \  \n                        // 0.5*(sqrt(3.0)-1.0)\n        \
                    \                -0.577350269189626,  \n                     \
                    \   // -1.0 + 2.0 * C.x\n                        0.024390243902439);\
                    \ \n                        // 1.0 / 41.0\n\n    // First corner\
                    \ (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 =\
                    \ v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n\
                    \    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0,\
                    \ 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy\
                    \ + C.zz;\n\n    // Do some permutations to avoid\n    // truncation\
                    \ effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n\
                    \            permute( i.y + vec3(0.0, i1.y, 1.0))\n          \
                    \      + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5\
                    \ - vec3(\n                        dot(x0,x0), \n            \
                    \            dot(x1,x1), \n                        dot(x2,x2)\n\
                    \                        ), 0.0);\n\n    m = m*m ;\n    m = m*m\
                    \ ;\n\n    // Gradients: \n    //  41 pts uniformly over a line,\
                    \ mapped onto a diamond\n    //  The ring size 17*17 = 289 is\
                    \ close to a multiple \n    //      of 41 (41*7 = 287)\n\n   \
                    \ vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x)\
                    \ - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\
                    \n    // Normalise gradients implicitly by scaling m\n    // Approximation\
                    \ of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159\
                    \ - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise\
                    \ value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x\
                    \  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz *\
                    \ vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\n\n//\n\
                    // Simplex Noise\n//\nconst float F3 =  0.3333333;\nconst float\
                    \ G3 =  0.1666667;\nfloat snoise (vec3 p) {\n    vec3 s = floor(p\
                    \ + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\
                    \    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0\
                    \ - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    vec3 x1\
                    \ = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3\
                    \ = x - 1.0 + 3.0*G3;\n    vec4 w, d;\n    w.x = dot(x, x);\n\
                    \    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3,\
                    \ x3);\n    w = max(0.6 - w, 0.0);\n    d.x = dot(random3(s),\
                    \ x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s\
                    \ + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    w *=\
                    \ w;\n    w *= w;\n    d *= w;\n    return dot(d, vec4(52.0));\n\
                    }"
    generative-random:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Set of functions about random.

                For more information on this theme read [this chapter of The Book
                of Shaders about Random](http://thebookofshaders.com/10/).

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// 1D Random for 1 and 2 dimentions\n// ================================\n\
                    float random (float x) { return fract(sin(x)*43758.5453);}\nfloat\
                    \ random (vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y *\
                    \ 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\nfloat random\
                    \ (vec3 p) { return fract(sin(dot(p.xyz, vec3(70.9898,78.233,32.4355)))*\
                    \ 43758.5453123); }\n//\n// 2D Random for 2 dimentions\n// ================================\n\
                    vec2 random2 (vec2 xy) { return fract(sin(vec2(dot(xy,vec2(127.1,311.7)),dot(xy,vec2(269.5,183.3))))*43758.5453);\
                    \ }\n//\n// 3D Random for 2 dimentions\n// ================================\n\
                    vec3 random3 (vec2 xy) { return fract(sin(vec3( dot(xy,vec2(127.1,311.7)),\
                    \ dot(xy,vec2(269.5,183.3)), dot(xy,vec2(419.2,371.9)) ))*43758.5453);\
                    \ }\nvec3 random3 (vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0,\
                    \ 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n   \
                    \ j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y\
                    \ = fract(512.0*j);\n    return r-0.5;\n}"
