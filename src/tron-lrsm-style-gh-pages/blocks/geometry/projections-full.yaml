import:
- ../block.yaml
styles:
    block:
        shaders:
            defines:
                ADD: +
                EPSILON: 1.0e-07
                HALF_PI: 1.5707963267948966
                MULTIPLY: '*'
                PI: 3.141592653589793
                QUATER_PI: 0.785398163
                SUBTRACT: '-'
                TWO_PI: 6.283185307179586
                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)
    geometry-projections:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Collection of functions to do different geometry projections

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - block
        shaders:
            blocks:
                global: "//\n//    The following functions take or return there results\
                    \ in degrees\n//    http://wiki.openstreetmap.org/wiki/Mercator\n\
                    float y2lat_d (float y) { \n    return rad2deg(2.0 * atan(exp(\
                    \ deg2rad(y) ) ) - HALF_PI); \n}\nfloat x2lon_d (float x) { \n\
                    \    return x; \n}\nfloat lat2y_d (float lat) { \n    return rad2deg(log(tan(QUATER_PI+\
                    \ deg2rad(lat)/2.0))); \n}\nfloat lon2x_d (float lon) {\n    return\
                    \ lon;\n}\n//\n//    The following functions take or return there\
                    \ results in something close to meters, along the equator \n//\
                    \    http://wiki.openstreetmap.org/wiki/Mercator\nfloat y2lat_m\
                    \ (float y) {\n    return rad2deg(2.0 * atan(exp( (y / EARTH_RADIUS\
                    \ ) )) - HALF_PI);\n}\nfloat x2lon_m (float x) {\n    return rad2deg(x\
                    \ / EARTH_RADIUS);\n}\nfloat lat2y_m (float lat) {\n    return\
                    \ EARTH_RADIUS * log(tan(QUATER_PI+ deg2rad(lat)/2.0));\n}\nfloat\
                    \ lon2x_m (float lon) {\n    return deg2rad(lon) * EARTH_RADIUS;\n\
                    }\n\n// ALBERS\n// https://gist.github.com/RandomEtc/476238\n\
                    vec2 latlon2albers (float lat, float lon, float lat0, float lng0,\
                    \ float phi1, float phi2 ) {\n    lat0 = deg2rad(lat0);    //\
                    \ Latitude_Of_Origin\n    lng0 = deg2rad(lng0);    // Central_Meridian\n\
                    \    phi1 = deg2rad(phi1);    // Standard_Parallel_1\n    phi2\
                    \ = deg2rad(phi2);    // Standard_Parallel_2\n    \n    float\
                    \ n = 0.5 * (sin(phi1) + sin(phi2));\n    float c = cos(phi1);\n\
                    \    float C = c*c + 2.*n*sin(phi1);\n    float p0 = sqrt(C -\
                    \ 2.*n*sin(lat0)) / n;\n    float theta = n * (deg2rad(lon)-lng0);\n\
                    \    float p = sqrt(C - 2.*n*sin(deg2rad(lat)))/n;\n    return\
                    \ vec2(p * sin(theta), p0 - p * cos(theta)) * EARTH_RADIUS;\n\
                    }\n\nvec2 latlon2albers (float lat, float lon, float delta_phi1,\
                    \ float delta_phi2) {\n    return latlon2albers(lat, \n      \
                    \                  lon, \n                        y2lat_m(u_map_position.y),\
                    \ \n                        x2lon_m(u_map_position.x), \n    \
                    \                    y2lat_m(u_map_position.y)+delta_phi1, \n\
                    \                        y2lat_m(u_map_position.y+delta_phi2)\
                    \ );\n}\n\nvec2 latlon2albers (float lat, float lon, float width)\
                    \ {\n    return latlon2albers(lat, lon, width, -width);\n}\n\n\
                    vec2 latlon2albers (float lat, float lon) {\n    return latlon2albers(lat,lon,20.);\n\
                    }\n\nvec2 latlon2USalbers (float lat, float lon) {\n    return\
                    \ latlon2albers(lat,lon,23.,-96.,29.,45.);\n}\n\n// AZIMUTHAL\n\
                    // http://rogerallen.github.io/webgl/2014/01/27/azimuthal-equidistant-projection/\n\
                    vec2 latlon2azimuthal (float lat, float lon, float phi1, float\
                    \ lambda0) {\n    phi1 = deg2rad(phi1);\n    lambda0 = deg2rad(lambda0);\n\
                    \    vec2 st = vec2(deg2rad(lon),deg2rad(lat));\n    float c =\
                    \ length(st);\n    float phi = asin(cos(c)*sin(phi1) + st.y*sin(c)*cos(phi1)/c\
                    \ );\n    float lambda = lambda0 +\n        atan( st.x*sin(c),\
                    \ (c*cos(phi1)*cos(c) - st.y*sin(phi1)*sin(c)));\n    return vec2(phi,lambda);\n\
                    }\n\nvec2 azimuthal(float lat, float lon) {\n    return latlon2azimuthal(lat,\
                    \ lon, \n                            y2lat_m(u_map_position.y),\n\
                    \                            x2lon_m(u_map_position.x));\n}\n\n\
                    vec2 azimuthalNorth(float lat, float lon) {\n    return latlon2azimuthal(lat,\
                    \ lon, \n                            90.,\n                  \
                    \          x2lon_m(u_map_position.x));\n}\n\nvec2 azimuthalSouth(float\
                    \ lat, float lon) {\n    return latlon2azimuthal(lat, lon, \n\
                    \                            -90.,\n                         \
                    \   x2lon_m(u_map_position.x));\n}"
            defines:
                EARTH_RADIUS: 6378137.0
