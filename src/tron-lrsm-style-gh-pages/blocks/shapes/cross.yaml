import: rect.yaml
styles:
    shapes-cross:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |  
                Collection of functions to draw crosses. To learn more about how to make shapes on shaders go to From check [this chapter about shapes from the Book of Shaders](https://thebookofshaders.com/07/)
            examples:
                9845C:
                    url: https://tangrams.github.io/tangram-sandbox/styles/9845C.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/9845C.png
                    lines: 181-183
                matrix:
                    url: https://tangrams.github.io/tangram-sandbox/styles/matrix.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/matrix.png
                    lines: 101-104
                tron:
                    url: https://tangrams.github.io/tangram-sandbox/styles/tron.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/tron.png
                    lines: 122
                oblivion:
                    url: https://tangrams.github.io/tangram-sandbox/styles/oblivion.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/oblivion.png
                    lines: 155-156
        mix: shapes-rect
        shaders:
            blocks:
                global: |
                    // Draw a Cross in the middle of the ST space
                    float cross (vec2 st, float size, float width) {
                        return  clamp(  rect(st, vec2(size*0.5,width*0.125)) +
                                        rect(st, vec2(width*0.125,size*0.5)),0.,1.);
                    }
                    float cross (in vec2 st, float _size) {
                        return  rect(st, vec2(_size*0.5,_size*0.125)) +
                                rect(st, vec2(_size*0.125,_size*0.5));
                    }
                    float cross (in vec2 st, vec2 _size) {
                        return  rect(st, vec2(_size.x*0.5,_size.y*0.125)) +
                                rect(st, vec2(_size.y*0.125,_size.x*0.5));
                    }