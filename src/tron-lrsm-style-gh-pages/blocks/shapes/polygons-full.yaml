import:
- ../functions/aastep.yaml
styles:
    block:
        shaders:
            defines:
                ADD: +
                EPSILON: 1.0e-07
                HALF_PI: 1.5707963267948966
                MULTIPLY: '*'
                PI: 3.141592653589793
                QUATER_PI: 0.785398163
                SUBTRACT: '-'
                TWO_PI: 6.283185307179586
                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)
    functions-aastep:
        doc:
            author:
                name: Matt DesLauriers
                twitter: mattdesl
            description: 'AnitAliased ```step()``` function implemented by [Matt DesLauriers](https://twitter.com/mattdesl)
                in this module <https://github.com/stackgl/glsl-aastep>

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// AntiAliased Step function\n//=============================\n\
                    float aastep(float threshold, float value) {\n    #ifdef TANGRAM_FRAGMENT_SHADER\n\
                    \        #ifdef TANGRAM_EXTENSION_OES_standard_derivatives\n \
                    \           float afwidth = length(vec2(dFdx(value), dFdy(value)))\
                    \ * 0.70710678118654757;\n            return smoothstep(threshold-afwidth,\
                    \ threshold+afwidth, value);\n        #else\n            return\
                    \ step(threshold, value);\n        #endif  \n    #else\n     \
                    \   return step(threshold, value);\n    #endif\n}"
            extensions: OES_standard_derivatives
    shapes-polygons:
        doc:
            description: 'Collection of functions to draw polygons. To learn more
                about how to make shapes on shaders go to From check [this chapter
                about shapes from the Book of Shaders](https://thebookofshaders.com/07/)

                '
            examples:
                9845C:
                    img: https://tangrams.github.io/tangram-sandbox/styles/9845C.png
                    lines: 153
                    url: https://tangrams.github.io/tangram-sandbox/styles/9845C.yaml
        mix:
        - shapes-type
        shaders:
            blocks:
                global: "// get distance field of a polygon in the center\n// where\
                    \ N is the number of sides of it\n// ================================\n\
                    float shapeDF (vec2 st, int N) {\n    st = st *2.-1.;\n    float\
                    \ a = atan(st.x,st.y)+PI;\n    float r = TWO_PI/float(N);\n  \
                    \  return cos(floor(.5+a/r)*r-a)*length(st);\n}\n\n// draw a polygon\
                    \ in the center\n// where N is the number of sides of it\n// ================================\n\
                    float shape (vec2 st, int N, float width) {\n    return fill(width,\
                    \ shapeDF(st,N));\n}\n\n// draw a polygon border in the center\n\
                    // where N is the number of sides of it\n// ================================\n\
                    float shapeBorder (vec2 st, int N, float width) {\n    return\
                    \ stroke(width, shapeDF(st,N));\n}"
    shapes-type:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: "This block provides to functions `fill` and `stroke`. Each\
                \ one transform a SDF to a fill shape or a stroke shape (border).\
                \ The stroke width can be control with the define `STROKE`. \nTo learn\
                \ more about how to make shapes on shaders go to From check [this\
                \ chapter about shapes from the Book of Shaders](https://thebookofshaders.com/07/)\n"
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - functions-aastep
        shaders:
            blocks:
                global: "float fill (in float size, in float x) {\n    return 1.-aastep(size,\
                    \ x);\n}\n\nfloat stroke (in float size, in float x) {\n    return\
                    \ aastep(size, x+STROKE) - aastep(size, x);\n}"
            defines:
                STROKE: 0.15
