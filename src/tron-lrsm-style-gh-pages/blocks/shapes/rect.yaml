import:
    - type.yaml

styles:
    shapes-rect:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |  
                Collection of functions to draw rectangles. To learn more about how to make shapes on shaders go to From check [this chapter about shapes from the Book of Shaders](https://thebookofshaders.com/07/)
        mix: [shapes-type]
        shaders:
            blocks:
                global: |
                    // get distance field of a rectangle in the center
                    // ================================
                    float rectDF (in vec2 st, in vec2 size) {
                        st = st*2.-1.;
                        return length(max(abs(st)-size,.0));
                    }
                    float rectDF (in vec2 st, in float size) {
                        return rectDF(st, vec2(size));
                    }
                    
                    // Draw a round corners rectangle in the center
                    // ================================
                    float rect (in vec2 st, in vec2 size, in float radio) {
                        radio = max(.000001, radio);
                        return fill(radio, rectDF(st, size-radio));
                    }
                    
                    float rect (vec2 st, float size, float radio) {
                        return rect(st,vec2(size),radio);
                    }
                    
                    // Draw a round corners rectangle border in the center
                    // ================================
                    float rectBorder (in vec2 st, in vec2 size, in float radio) {
                        radio = max(.000001, radio);
                        return stroke(radio, rectDF(st, size-radio));
                    }
                    
                    float rectBorder (vec2 st, float size, float radio) {
                        return rect(st,vec2(size),radio);
                    }

                    // Draw a rectangle in the center
                    // ================================
                    float rect (vec2 st, vec2 size){
                        size = .25-size*.125;
                        vec2 uv = step(size,st*(1.0-st));
                        return (uv.x*uv.y);
                    }
                    
                    float rect (vec2 st, float size){
                        return rect(st, vec2(size));
                    }
