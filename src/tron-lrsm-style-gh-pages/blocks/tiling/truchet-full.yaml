import:
- ../block.yaml
styles:
    block:
        shaders:
            defines:
                ADD: +
                EPSILON: 1.0e-07
                HALF_PI: 1.5707963267948966
                MULTIPLY: '*'
                PI: 3.141592653589793
                QUATER_PI: 0.785398163
                SUBTRACT: '-'
                TWO_PI: 6.283185307179586
                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)
    geometry-matrices:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Useful set of functions to construct scale, rotation and
                translation of 2, 3 or 4 dimensions. For more information about matrices
                read [this chapter from The Book of Shaders](http://thebookofshaders.com/08/)

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - blocks
        shaders:
            blocks:
                global: "// Rotate in 2, 3 and 4 dimensions\n// ================================\n\
                    mat2 rotate2D (float angle) {\n    return mat2(cos(angle),-sin(angle),\n\
                    \                sin(angle),cos(angle));\n}\nmat3 rotateX3D (float\
                    \ phi) {\n    return mat3(\n        vec3(1.,0.,0.),\n        vec3(0.,cos(phi),-sin(phi)),\n\
                    \        vec3(0.,sin(phi),cos(phi)));\n}\nmat4 rotateX4D (float\
                    \ phi) {\n    return mat4(\n        vec4(1.,0.,0.,0),\n      \
                    \  vec4(0.,cos(phi),-sin(phi),0.),\n        vec4(0.,sin(phi),cos(phi),0.),\n\
                    \        vec4(0.,0.,0.,1.));\n}\nmat3 rotateY3D (float theta)\
                    \ {\n    return mat3(\n        vec3(cos(theta),0.,-sin(theta)),\n\
                    \        vec3(0.,1.,0.),\n        vec3(sin(theta),0.,cos(theta)));\n\
                    }\nmat4 rotateY4D (float theta) {\n    return mat4(\n        vec4(cos(theta),0.,-sin(theta),0),\n\
                    \        vec4(0.,1.,0.,0.),\n        vec4(sin(theta),0.,cos(theta),0.),\n\
                    \        vec4(0.,0.,0.,1.));\n}\nmat3 rotateZ3D (float psi) {\n\
                    \    return mat3(\n        vec3(cos(psi),-sin(psi),0.),\n    \
                    \    vec3(sin(psi),cos(psi),0.),\n        vec3(0.,0.,1.));\n}\n\
                    mat4 rotateZ4D (float psi) {\n    return mat4(\n        vec4(cos(psi),-sin(psi),0.,0),\n\
                    \        vec4(sin(psi),cos(psi),0.,0.),\n        vec4(0.,0.,1.,0.),\n\
                    \        vec4(0.,0.,0.,1.));\n}\n//\n// Scale 4 dimensions\n//\
                    \ ================================\nmat4 scale4D (float x, float\
                    \ y, float z) {\n    return mat4(\n        vec4(x,   0.0, 0.0,\
                    \ 0.0),\n        vec4(0.0, y,   0.0, 0.0),\n        vec4(0.0,\
                    \ 0.0, z,   0.0),\n        vec4(0.0, 0.0, 0.0, 1.0)\n    );\n\
                    }\n//\n// Translate in 4 dimensions\nmat4 translate4D (float x,\
                    \ float y, float z) {\n    return mat4(\n        vec4(1.0, 0.0,\
                    \ 0.0, 0.0),\n        vec4(0.0, 1.0, 0.0, 0.0),\n        vec4(0.0,\
                    \ 0.0, 1.0, 0.0),\n        vec4(x,   y,   z,   1.0)\n    );\n}"
    tiling-truchet:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Repeats a coordinate space (`vec2 st`) in diferent tiles
                acording to a Truchet patern.

                There is two way to do this: by mirroring the spaces (`vec2 truchetMirror
                (vec2 st)`) or rotating them (''vec2 truchetRotate (vec2 st)'')

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix: geometry-matrices
        shaders:
            blocks:
                global: "// Truchet Patern reference\n// ================================\n\
                    //\n//        |\n//    0   |   1\n//        |\n//  --------------\n\
                    //        |\n//    2   |   3\n//        |\n//\n\n// A- Mirror\
                    \ tiles acording to a Truchet patern\n// ================================\n\
                    vec2 truchetMirror (vec2 st) {\n    // Shapes mirror pattern\n\
                    \    vec2 f_st = fract(st*2.);\n    vec2 i_st = floor(st*2.);\n\
                    \    // non-even row + non-even col \n    float index = 0.0;\n\
                    \    index += mod(i_st.x,2.0);\n    index += mod(i_st.y,2.0)*2.;\n\
                    \    // rotate acording\n    if(index == 1.0){\n        f_st.x\
                    \ = 1.-f_st.x;\n    } else if(index == 2.0){\n        f_st.y =\
                    \ 1.-f_st.y;\n    } else if(index == 3.0){\n        f_st.x = 1.-f_st.x;\n\
                    \        f_st.y = 1.-f_st.y;\n    }\n    return f_st;\n}\n//\n\
                    // B- Rotate tiles acording to a Truchet patern\n// ================================\n\
                    vec2 truchetRotate (vec2 st) {\n    //  Scale the coordinate system\
                    \ by 2x2 \n    st *= 2.0;\n    //\n    //  Give each cell an index\
                    \ number\n    //  according to its position\n    float index =\
                    \ 0.0;\n    index += step(1., mod(st.x,2.0));\n    index += step(1.,\
                    \ mod(st.y,2.0))*2.0;\n    //\n    // Make each cell between 0.0\
                    \ - 1.0\n    st = fract(st);\n    //\n    // Rotate each cell\
                    \ according to the index\n    if(index == 1.0){\n        //  Rotate\
                    \ cell 1 by 90 degrees\n        st = rotate2D(st,PI*0.5);\n  \
                    \  } else if(index == 2.0){\n        //  Rotate cell 2 by -90\
                    \ degrees\n        st = rotate2D(st,PI*-0.5);\n    } else if(index\
                    \ == 3.0){\n        //  Rotate cell 3 by 180 degrees\n       \
                    \ st = rotate2D(st,PI);\n    }\n    //\n    return st;\n}"
            defines:
                PI: 3.141592653589793
